/*
 * Window.cpp
 *
 *  Created on: 2012-02-25
 *      Author: leo
 */

#include <vector>
#include <fruitpunch/Graphics/Renderer.h>
#include <fruitpunch/Graphics/Camera.h>
#include <fruitpunch/Graphics/Window.h>
#include <fruitpunch/Graphics/Primitive.h>
#include <fruitpunch/Python/PyLoader.h>
#include <fruitpunch/Graphics/Matrices.h>
#include <fruitpunch/Common/Events.h>
#include <time.h>
#include <sys/time.h>
#include <boost/date_time/posix_time/posix_time.hpp>
#include <boost/date_time/local_time/local_time.hpp>
#include <boost/date_time/gregorian/greg_month.hpp>
#include <boost/date_time/gregorian_calendar.hpp>
#include <iostream>
#include <string>
#include <boost/shared_ptr.hpp>
#include <boost/cstdint.hpp>

using namespace boost;
using namespace std;

namespace fpunch {
<<<<<<< HEAD
class WindowClickObserver: public Observer {
public:
	void action() {
		shared_ptr<Window> w = static_pointer_cast<Window>(getInstance());

		try {
			w->pointerEvent(getEvent());
		} catch (const boost::python::error_already_set&) {
			printf("%s",
					Runtime::getCurrent()->getPythonLoader()->getPythonError().c_str());
		}
	}

};

Window::~Window() {
=======

/**
 * Observer that allows the Window class to listen to pointer events given
 * to itself.
 */    
class WindowClickObserver : public Observer {
    public:
        void action() {
        	shared_ptr<Window> w = static_pointer_cast<Window>(getInstance());

        	try {
        		w->pointerEvent(getEvent());
            } catch (const boost::python::error_already_set&) {
            	printf("%s", Runtime::getCurrent()->getPythonLoader()->getPythonError().c_str());
            }
        }

    };

Window::~Window() {
	// TODO Auto-generated destructor stub
>>>>>>> d68ac0e00b0953b4e7b3767edcb00b6190d26e26
}

shared_ptr<Camera> Window::getCamera() const {
	return m_camera;
}

vector<PrimitivePtr> Window::getPrimitives() const {
	return m_primitives;
}

shared_ptr<Renderer> Window::getRenderer() const {
	return m_renderer;
}

int Window::getWindowHeight() const {
	return m_window_height;
}

int Window::getWindowWidth() const {
	return m_window_width;
}

void Window::setCamera(boost::shared_ptr<Camera> camera) {
	m_camera = camera;
}

void Window::setPrimitives(vector<PrimitivePtr> primitives) {
	m_primitives = primitives;
}

void Window::setRenderer(shared_ptr<Renderer> renderer) {
	m_renderer = renderer;
}

<<<<<<< HEAD
void Window::setWindowHeight(int windowHeight) {
	m_window_height = windowHeight;
}

void Window::init(int width, int height, shared_ptr<Renderer> renderer) {
	m_camera = shared_ptr<Camera>(new Camera());
	m_renderer = renderer;
	m_renderer->init(width, height);
	m_window_width = width;
	m_window_height = height;
	m_lastFrameRend = 0;
	createDefaultObservers();
}

void Window::renderFrame() {
	float frameTimeMs = (1.0 / m_fps) * 1000;
	long curTimeInMs = getTimeInMilliseconds();
	if ((curTimeInMs - m_lastFrameRend) < frameTimeMs) {
		return;
	}
	m_lastFrameRend = curTimeInMs;
	m_renderer->pre_render();
	this->notify(EV_PRE_RENDER); //
=======
    void Window::setWindowHeight(int windowHeight)
    {
        m_window_height = windowHeight;
    }

    void Window::init(int width, int height, shared_ptr<Renderer> renderer) {
        m_camera = shared_ptr<Camera>(new Camera());
        m_renderer = renderer;
        m_renderer->init(width, height);
        m_window_width = width;
        m_window_height = height;
        m_lastFrameRend = 0;
        createDefaultObservers();
    }

 void Window::renderFrame() {
    float frameTimeMs = (1.0 / m_fps) * 1000;
    long curTimeInMs = getTimeInMilliseconds();
    if((curTimeInMs - m_lastFrameRend) < frameTimeMs){
      return;
    }
    m_lastFrameRend = curTimeInMs;
    
	m_renderer->pre_render();
	this->notify(EV_PRE_RENDER);
>>>>>>> d68ac0e00b0953b4e7b3767edcb00b6190d26e26
	for (int i = 0; i < m_primitives.size(); i++) {
		PrimitivePtr p = m_primitives[i];
		vector<point> parr = p->pointVector();
		vector<point> uvarr = p->uvPointVector();

		// camera transformation
		if (!p->isStick()) {
			parr = apply_matrix_transformation(parr, *m_renderer,
					m_camera->matrix());
		}
<<<<<<< HEAD

		// viewport transformation
		parr = apply_matrix_transformation(parr, *m_renderer,
				m_renderer->viewport());

		// updates the primitive vertex information
		p->setTransVertices(parr);

		// renders the vertices
		float * farr = pointVectorToFloatArr(parr);
		float * fuvarr = pointVectorToFloatArr(uvarr);

		m_renderer->render_polygon(farr, fuvarr,
				m_primitives[i]->getVertices().size(), *(p->getImage()),
				p->getAlpha());

		delete farr;
		delete fuvarr;

		m_renderer->post_render();
		this->notify(EV_POST_RENDER);
	}
=======

		// viewport transformation
		parr = apply_matrix_transformation(parr, *m_renderer,
				m_renderer->viewport());

		// updates the primitive vertex information
		p->setTransVertices(parr);

		// renders the vertices
		float * farr = pointVectorToFloatArr(parr);
		float * fuvarr = pointVectorToFloatArr(uvarr);

		m_renderer->render_polygon(farr, fuvarr, m_primitives[i]->getVertices().size(), *(p->getImage()), p->getAlpha());

		delete farr;
		delete fuvarr;
	}
	m_renderer->post_render();
	this->notify(EV_POST_RENDER);
 }

    int Window::getFps() const
    {
        return m_fps;
    }

    void Window::setFps(int fps)
    {
        m_fps = fps;
    }

    long Window::getTimeInMilliseconds()
    {
        boost::posix_time::ptime epoch = boost::posix_time::time_from_string("1970-01-01 00:00:00.000");
        boost::posix_time::ptime now = boost::posix_time::microsec_clock::local_time();
        const boost::posix_time::time_duration diff = now - epoch;
        long long ms = diff.total_milliseconds();
        return (ms);
    }

void Window::addPrimitive(shared_ptr<Primitive> primitive) {
	primitive->setWindow(this);
	m_primitives.push_back(primitive);
	shared_ptr<Primitive> p = m_primitives[0];
}

void Window::setWindowWidth(int windowWidth) {
	m_window_width = windowWidth;
}

Window::Window() {
}

float *Window::pointVectorToFloatArr(std::vector<point> vec) {
	int vsize = vec.size() * 2;
	float * result = new float[vsize];

	int i = 0;
	int ii = 0;
	for (; i < vec.size(); i++) {
		result[ii++] = vec[i].x;
		result[ii++] = vec[i].y;
	}

	return result;
}

void Window::pointerEvent(std::string event) {
  // Transforms the pointer using the camera
  point cPointer = m_renderer->transform_point(m_pointer, m_camera->inverseMatrix());

  // goes through each primitive to check if they have been hit by the pointer
  // event
  vector<PrimitivePtr>::const_iterator it = m_primitives.begin();
  for (; it != m_primitives.end(); it++) {
    if ((**it).contains(cPointer)) {
      (**it).notify(event);
    }
  }
}

    point Window::getPointer() const
    {
        return m_pointer;
    }

    void Window::setPointer(point pointer)
    {
        m_pointer = pointer;
    }

	void Window::reset()
	{
	  // clears all primitives
	  m_primitives.clear();

	  removeAllObservers();
	  createDefaultObservers();
	}

void Window::createDefaultObservers()
{
  typedef shared_ptr<WindowClickObserver> observer;

   observer o1(new WindowClickObserver());
   observer o2(new WindowClickObserver());
   observer o3(new WindowClickObserver());

   this->attachObserver(EV_POINTER_DOWN, o1);
   this->attachObserver(EV_POINTER_UP, o2);
   this->attachObserver(EV_POINTER_MOVE, o3);
   this->notify(EV_INIT);
>>>>>>> d68ac0e00b0953b4e7b3767edcb00b6190d26e26
}

int Window::getFps() const {
	return m_fps;
}

void Window::setFps(int fps) {
	m_fps = fps;
}

long Window::getTimeInMilliseconds() {
	boost::posix_time::ptime epoch = boost::posix_time::time_from_string(
			"1970-01-01 00:00:00.000");
	boost::posix_time::ptime now =
			boost::posix_time::microsec_clock::local_time();
	const boost::posix_time::time_duration diff = now - epoch;
	long long ms = diff.total_milliseconds();
	return (ms);
}

void Window::addPrimitive(shared_ptr<Primitive> primitive) {
	primitive->setWindow(this);
	m_primitives.push_back(primitive);
	shared_ptr<Primitive> p = m_primitives[0];
}

void Window::setWindowWidth(int windowWidth) {
	m_window_width = windowWidth;
}

Window::Window() {
}

float *Window::pointVectorToFloatArr(std::vector<point> vec) {
	int vsize = vec.size() * 2;
	float *result = new float[vsize];
	int i = 0;
	int ii = 0;
	for (; i < vec.size(); i++) {
		result[ii++] = vec[i].x;
		result[ii++] = vec[i].y;
	}
	return result;
}

void Window::pointerEvent(std::string event) {
	point cPointer = m_renderer->transform_point(m_pointer,
			m_camera->inverseMatrix());
	vector<PrimitivePtr>::const_iterator it = m_primitives.begin();
	for (; it != m_primitives.end(); it++) {
		if ((**it).contains(cPointer)) {
			(**it).notify(event);
			//return;
		}
	}
}

point Window::getPointer() const {
	return m_pointer;
}

void Window::setPointer(point pointer) {
	m_pointer = pointer;
}

void Window::reset() {
	m_primitives.clear();

	removeAllObservers();
	createDefaultObservers();
}

void Window::createDefaultObservers() {
	typedef shared_ptr<WindowClickObserver> observer;

	observer o1(new WindowClickObserver());
	observer o2(new WindowClickObserver());
	observer o3(new WindowClickObserver());

	this->attachObserver(EV_POINTER_DOWN, o1);
	this->attachObserver(EV_POINTER_UP, o2);
	this->attachObserver(EV_POINTER_MOVE, o3);

	this->notify(EV_INIT);
}

void Window::removePrimitive(boost::shared_ptr<Primitive> primitive) {
	vector<shared_ptr<Primitive> >::iterator it = m_primitives.begin();
	for (; it != m_primitives.end(); it++) {
		if (it->get() == primitive.get()) {
			m_primitives.erase(it);
			break;
		}
	}
}

}

/* namespace fpunch */
