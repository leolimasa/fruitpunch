/*
 * Group.h
 *
 *  Created on: 2012-03-17
 *      Author: leo
 */

#ifndef GROUP_H_
#define GROUP_H_

#include <fruitpunch/Graphics/Transformable.h>
#include <fruitpunch/Graphics/Renderer.h>
#include <vector>

namespace fp_core {

// ---------------------------------------------------------------------------
// Class Declaration
// ---------------------------------------------------------------------------

/// Allows the transformation of multiple transformables as a group.
/**
 *  When transformables, such as primitive,s are added to an instance of this
 *  class, subsequent transformation calls - setPosition, setScale, and
 *  setRotation - will be applied to all transformables registered in the group.
 *  A transformable can be added to a Group by calling the add() method of the
 *  group.
 *
 *  Scale and rotation transformations will be applied considering a common
 *  center automatically generated by groupCenter()
 *
 */
class Group : public Transformable, public common::Object {
public:
  Group();
  virtual ~Group();

  // ---------------------------------------------------------------------------
  // Member Methods
  // ---------------------------------------------------------------------------

  /// Adds a new transformable to this group
  void add(TransformablePtr transformable);

  /// Returns the center of the bounding box that surrounds all the transformables
  point groupCenter() const;

  /// Returns the boundaries of the box surrounding all the transformables
  /**
   * Returns the max and min values for the group boundaries in the form of a
   * vector: [min, max]
   */
  std::vector<point> boundaries() const;

  // ------------------------------
  // Getters
  // ------------------------------
  virtual point getPosition() const;
  virtual float getRotation() const;
  virtual point getScale()    const;

  // ------------------------------
  // Setters
  // ------------------------------
  virtual void  setPosition(point pos);
  virtual void  setScale   (point scal);
  virtual void  setRotation(float angle);

private:
	std::vector<TransformablePtr> m_content;
	point m_center;
	point m_position;
	float m_rotation;
	point m_scale;
	RendererPtr m_renderer;

};

} /* namespace fp_core */
#endif /* GROUP_H_ */
