/*
 * Observer.h
 *
 *  Created on: 2012-02-29
 *      Author: leo
 */

#ifndef OBSERVER_H_
#define OBSERVER_H_


#include <string>
#include <map>
#include <boost/shared_ptr.hpp>
#include <fruitpunch/Common/Object.h>

namespace fp_core {
namespace common{

class Event;
class Observable;

// ---------------------------------------------------------------------------
// Class Declaration
// ---------------------------------------------------------------------------

/// A call to be fired by an Observable.
/**
 *  Classes that extend this class will have the method action() executed when
 *  they are attached to an Observable object whenever the specified event
 *  occurs.
 */
class Observer : public Object {

public:
  typedef boost::shared_ptr<Observer> ref;

  Observer();
  virtual ~Observer();

  // -------------------------------------------------------------------------
  // Member Methods
  // -------------------------------------------------------------------------

  /// Call to be fired on event
  /**
   * This method will be called every time the Observable detects an event
   * where this Observer was registered. Classes that Inherit Observer must
   * implement this method.
   */
  virtual void action() =0;

  // -------------------------------------------------------------------------
  // Getters
  // -------------------------------------------------------------------------

  /// Returns the event name.
  /**
   *  Returns the name of the event that this observer is listening to.
   *  @return std::string The name of the event
   */
  std::string getEventName();

  /// Returns the Observable that the Observer is attached to
  /**
   *  @return Observable::Ptr A boost shared_ptr to the Observable
   */
  boost::shared_ptr<Observable> getInstance() const;

  /// Gets the actual event object that was generated by notify
  boost::shared_ptr<Event> getEvent() const;

  // -------------------------------------------------------------------------
  // Setters
  // -------------------------------------------------------------------------

  /// Sets the event name to be listened.
  /**
   *  Sets the name of the event that the observer
   *  will be listening to.
   */
  void setEventName(std::string event);

  /// Sets the Observable that this Observer will be attached.
  /**
   *  Just setting the observable here is no replacement for
   *  a call to Observable.attachObserver(). This method
   *  only updates an internal reference.
   *  @param instance the Observable instance
   */
  void setInstance(boost::shared_ptr<Observable> instance);

  /// Sets the actual event object that was generated by notify
  void setEvent(boost::shared_ptr<Event> event);

private:
  std::string                     mEventName;
  boost::shared_ptr<Event>        mEvent;
  boost::shared_ptr<Observable>   mInstance;
};

} /* namespace common */
} /* namespace fp_core */
#endif /* OBSERVER_H_ */
